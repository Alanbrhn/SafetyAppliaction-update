// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafetyApplication.Data;

#nullable disable

namespace SafetyAppliaction.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241026141721_UpdateTableWorklist")]
    partial class UpdateTableWorklist
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("EmployeeRequest", b =>
                {
                    b.Property<int>("InstructorsEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InstructorsEmployeeId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestInstructors", (string)null);
                });

            modelBuilder.Entity("EmployeeRequest1", b =>
                {
                    b.Property<int>("AttendantsEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Request1RequestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttendantsEmployeeId", "Request1RequestId");

                    b.HasIndex("Request1RequestId");

                    b.ToTable("RequestAttendants", (string)null);
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Departement", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeptHeadId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecretaryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentId");

                    b.HasIndex("AdminId");

                    b.HasIndex("DeptHeadId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.JwtTokenInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExpiryInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JwtTokens");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApprovalStage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Departement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FormNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PotentialDangerousPoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TheMostDangerPoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.HasIndex("StatusId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(4956),
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = 2,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(4973),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 3,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(4975),
                            RoleName = "Manager"
                        });
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(5132),
                            StatusName = "waiting Checking"
                        },
                        new
                        {
                            StatusId = 2,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(5134),
                            StatusName = "Checked"
                        },
                        new
                        {
                            StatusId = 3,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(5135),
                            StatusName = "Reviewed"
                        },
                        new
                        {
                            StatusId = 4,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(5137),
                            StatusName = "Approved DeptHead"
                        },
                        new
                        {
                            StatusId = 5,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(5138),
                            StatusName = "Approved Manager"
                        },
                        new
                        {
                            StatusId = 6,
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 10, 26, 21, 17, 16, 1, DateTimeKind.Local).AddTicks(5139),
                            StatusName = "Rejected"
                        });
                });

            modelBuilder.Entity("SafetyAppliaction.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Worklist", b =>
                {
                    b.Property<int>("WorklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApprovalStage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Approver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("WorklistId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.ToTable("Worklists");
                });

            modelBuilder.Entity("SafetyApplication.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EmployeeRequest", b =>
                {
                    b.HasOne("SafetyApplication.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("InstructorsEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafetyAppliaction.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeRequest1", b =>
                {
                    b.HasOne("SafetyApplication.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("AttendantsEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafetyAppliaction.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("Request1RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Departement", b =>
                {
                    b.HasOne("SafetyApplication.Models.Employee", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafetyApplication.Models.Employee", "DeptHead")
                        .WithMany()
                        .HasForeignKey("DeptHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafetyApplication.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafetyApplication.Models.Employee", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("DeptHead");

                    b.Navigation("Manager");

                    b.Navigation("Secretary");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Request", b =>
                {
                    b.HasOne("SafetyAppliaction.Models.Status", "Status")
                        .WithMany("Requests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.User", b =>
                {
                    b.HasOne("SafetyApplication.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafetyAppliaction.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Worklist", b =>
                {
                    b.HasOne("SafetyAppliaction.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafetyAppliaction.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SafetyApplication.Models.Employee", b =>
                {
                    b.HasOne("SafetyAppliaction.Models.Departement", "Departements")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departements");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Departement", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SafetyAppliaction.Models.Status", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
